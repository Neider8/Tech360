CREATE DATABASE telastech360;
USE telastech360;

/* TABLAS SIN FK */

CREATE TABLE proveedor (
    id_proveedor INT ,
    nombre_proveedor VARCHAR(100),
    apellido_proveedor VARCHAR(100),
    direccion VARCHAR(200),
    correo VARCHAR(100),
    celular VARCHAR(20),
    CONSTRAINT pk_id_proveedor PRIMARY KEY (id_proveedor)
);

CREATE TABLE gerente (
    id_gerente INT ,
    nombre_gerente VARCHAR(100),
    apellido_gerente VARCHAR(100),
    cedula VARCHAR(20),
    correo VARCHAR(100),
    CONSTRAINT pk_id_gerente PRIMARY KEY (id_gerente)
);

CREATE TABLE operario (
    id_operario INT ,
    nombre_operario VARCHAR(100),
    apellido_operario VARCHAR(100),
    cedula VARCHAR(20),
    correo VARCHAR(100),
    celular VARCHAR(20),
    CONSTRAINT pk_id_operario PRIMARY KEY (id_operario)
);

CREATE TABLE cliente (
    id_cliente INT ,
    nombre_cliente VARCHAR(100),
    apellido_cliente VARCHAR(100),
    direccion VARCHAR(200),
    cedula VARCHAR(20),
    correo VARCHAR(100),
    celular VARCHAR(20),
    CONSTRAINT pk_id_cliente PRIMARY KEY (id_cliente)
);

CREATE TABLE maquina (
    id_maquina INT ,
    nombre_maquina VARCHAR(100), 
    tipo_maquina VARCHAR(100),
    CONSTRAINT pk_id_maquina PRIMARY KEY (id_maquina)
);

CREATE TABLE producto (
    id_producto INT ,
    nombre_producto VARCHAR(50),
    CONSTRAINT pk_id_producto PRIMARY KEY (id_producto)
);

CREATE TABLE variante_producto (
    id_variante INT,
    id_producto INT,
    talla INT,
    color VARCHAR(50),
    cantidad INT,
    CONSTRAINT pk_id_variante PRIMARY KEY (id_variante),
    CONSTRAINT fk_id_producto_var FOREIGN KEY (id_producto) REFERENCES producto(id_producto)
);

/* TABLAS CON FK */

CREATE TABLE materia_prima (
    id_materia_prima INT ,
    color VARCHAR(60),
    material VARCHAR(100),
    cantidad INT,
    id_proveedor INT,
    CONSTRAINT pk_id_materia_prima PRIMARY KEY (id_materia_prima),
    CONSTRAINT fk_id_proveedor FOREIGN KEY (id_proveedor) REFERENCES proveedor(id_proveedor)
);

CREATE TABLE produccion (
    id_produccion INT ,
    fechaInicio DATE,
    fechaFin DATE,
    id_operario INT,
    id_maquina INT,
    id_producto INT,
    estado_produccion VARCHAR(50),  -- Campo para estado de producción
    CONSTRAINT pk_id_produccion PRIMARY KEY (id_produccion),
    CONSTRAINT fk_id_operario FOREIGN KEY (id_operario) REFERENCES operario(id_operario),
    CONSTRAINT fk_id_maquina FOREIGN KEY (id_maquina) REFERENCES maquina(id_maquina),
    CONSTRAINT fk_id_producto_prod FOREIGN KEY (id_producto) REFERENCES producto(id_producto)
);

CREATE TABLE inventario (
    id_inventario INT ,
    cantidad INT,
    ubicacion VARCHAR(100),
    id_variante INT,
    CONSTRAINT pk_id_inventario PRIMARY KEY (id_inventario),
    CONSTRAINT fk_id_variante_inv FOREIGN KEY (id_variante) REFERENCES variante_producto(id_variante)
);

CREATE TABLE pedido (
    id_pedido INT ,
    direccion_pedido VARCHAR(200),
    fecha DATE,
    estado_pedido VARCHAR(50),  -- Campo para estado del pedido
    id_cliente INT,
    CONSTRAINT pk_id_pedido PRIMARY KEY (id_pedido),
    CONSTRAINT fk_id_cliente FOREIGN KEY (id_cliente) REFERENCES cliente(id_cliente)
);

CREATE TABLE detalle_pedido (
    id_detalle_pedido INT,
    id_pedido INT,
    id_variante INT,
    cantidad INT,
    CONSTRAINT pk_id_detalle_pedido PRIMARY KEY (id_detalle_pedido),
    CONSTRAINT fk_id_pedido_det FOREIGN KEY (id_pedido) REFERENCES pedido(id_pedido),
    CONSTRAINT fk_id_variante_det FOREIGN KEY (id_variante) REFERENCES variante_producto(id_variante)
);

CREATE TABLE factura (
    id_factura INT,
    forma_pago VARCHAR(50),
    valor INT,
    id_pedido INT,
    CONSTRAINT pk_id_factura PRIMARY KEY (id_factura),
    CONSTRAINT fk_id_pedido_fact FOREIGN KEY (id_pedido) REFERENCES pedido(id_pedido)
);

CREATE TABLE orden_compra (
    id_orden_compra INT ,
    cantidad INT,
    id_gerente INT,
    id_materia_prima INT,
    CONSTRAINT pk_id_orden_compra PRIMARY KEY (id_orden_compra),
    CONSTRAINT fk_id_gerente_ord FOREIGN KEY (id_gerente) REFERENCES gerente(id_gerente),
    CONSTRAINT fk_id_materia_prima_ord FOREIGN KEY (id_materia_prima) REFERENCES materia_prima(id_materia_prima)
);













c) Java + Spring Boot
Ideal para: Empresas o proyectos que requieren un enfoque empresarial con alta escalabilidad y robustez.
Ventajas:
Spring Boot es un framework de Java que permite crear aplicaciones Java de producción rápida con configuración mínima.
Soporte para aplicaciones de microservicios y servicios escalables.
Muy adecuado para aplicaciones de alto rendimiento, alto volumen de tráfico y transacciones complejas.
Spring Data JPA hace que la interacción con bases de datos sea simple.
Fuerte soporte para seguridad y autenticación (Spring Security).
Escalabilidad: Muy buena, especialmente en sistemas distribuidos y microservicios.
Recomendado para: Aplicaciones empresariales, sistemas con arquitectura de microservicios y proyectos que requieren alta estabilidad.
Ejemplo de stack:

Backend: Java + Spring Boot
Base de datos: MySQL (con Spring Data JPA)
Autenticación: Spring Security + JWT
Despliegue: Docker, Kubernetes